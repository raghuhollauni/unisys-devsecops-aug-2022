# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
name: Java CI with Maven
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  spotbugs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B clean package spotbugs:check --file pom.xml
      
  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B clean install --file pom.xml
      
  misconfiguration-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: setting up trivy
      run: wget https://github.com/aquasecurity/trivy/releases/download/v0.31.2/trivy_0.31.2_Linux-64bit.deb && sudo dpkg -i trivy_0.31.2_Linux-64bit.deb
    - name: check Dockerfile
      run: trivy config Dockerfile
    - name: Check Terraform Configuration file
      run: trivy config main.tf
    - name: Check k8s yaml
      run: trivy config deployment.yaml
  
  build-war:
    needs:
      - dependency-check
      - misconfiguration-check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B clean package --file pom.xml
    - name: upload war file
      uses: actions/upload-artifact@v2
      with: 
        name: JavaVulnerableLab
        path: target/JavaVulnerableLab.war
        
  build-image:
    needs:
      - build-war
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Docker
      run: |
        sudo apt update -y 
        sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable" && sudo apt update
        apt-cache policy docker-ce
        sudo apt install -y docker-ce
    - name: download war
      uses: actions/download-artifact@v2
      with: 
        name: JavaVulnerableLab
        path: ./
    - name: build Image
      run: docker image build . -t ghcr.io/raghuhollauni/javavulnerablelab:latest
    - name: login to GHCR
      run: docker login ghcr.io -u raghuhollauni -p ${{ secrets.PAT }}
    - name: Push Image
      run: docker image push ghcr.io/raghuhollauni/javavulnerablelab:latest

  image-scanning:
    needs:
      - build-image
    runs-on: ubuntu-latest
    steps:
    - name: setting up trivy
      run: wget https://github.com/aquasecurity/trivy/releases/download/v0.31.2/trivy_0.31.2_Linux-64bit.deb && sudo dpkg -i trivy_0.31.2_Linux-64bit.deb
    - name: Install Docker
      run: |
        sudo apt update -y 
        sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable" && sudo apt update
        apt-cache policy docker-ce
        sudo apt install -y docker-ce
    - name: login to GHCR
      run: docker login ghcr.io -u raghuhollauni -p ${{ secrets.PAT }}
    - name: Pull Image
      run: docker image pull ghcr.io/raghuhollauni/javavulnerablelab:latest
    - name: Scan Image
      run: trivy image ghcr.io/raghuhollauni/javavulnerablelab:latest

  deploy-application:
    needs: 
      - image-scanning
    runs-on: ubuntu-latest
    steps:
      - name: run deployment
        run: echo "[INFO] Running Deployment"
    
  dast:
    needs: 
      - deploy-application
    runs-on: ubuntu-latest
    steps:
    - name: Install Docker
      run: |
        sudo apt update -y 
        sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable" && sudo apt update
        apt-cache policy docker-ce
        sudo apt install -y docker-ce
    - name: Pull Image
      run: docker image pull owasp/zap2docker-stable:latest
    - name: running zap
      run: docker container run -i owasp/zap2docker-stable:latest zap-baseline.py -t "http://3.135.118.152:8080/javavulnerablelab/" -l PASS > zap_baseline_report.html
    - name: upload zap report
      uses: actions/upload-artifact@v2
      with: 
        name: Zap_Report
        path: zap_baseline_report.htm
